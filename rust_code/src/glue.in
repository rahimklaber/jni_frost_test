//Automatically generated by rifgen
use crate::*;
use jni_sys::*;

foreign_class!(
	class ParamsKeygen2 {
		self_type ParamsKeygen2;
		constructor ParamsKeygen2::new() -> ParamsKeygen2;
		fn ParamsKeygen2::add_commitment_from_user(&mut self,user: u16, commitment: &[i8]);
	}
);

foreign_class!(
	class ParamsKeygen3 {
		self_type ParamsKeygen3;
		constructor ParamsKeygen3::new() -> ParamsKeygen3;
		fn ParamsKeygen3::add_share_from_user(&mut self,user: u16, shares: &[i8]);
	}
);


foreign_class!(
	class ResultKeygen1 {
		self_type ResultKeygen1;
		constructor ResultKeygen1::new(keygen: SchnorrKeyGenWrapper, res: &[i8]) -> ResultKeygen1;
		fn ResultKeygen1::get_keygen(result: ResultKeygen1) -> SchnorrKeyGenWrapper;
		fn ResultKeygen1::get_res(&self) -> Vec<i8>;
	}
);

foreign_class!(
	class ResultKeygen2 {
		self_type ResultKeygen2;
		constructor ResultKeygen2::new() -> ResultKeygen2;
		fn ResultKeygen2::get_keygen(result: ResultKeygen2) -> SchnorrKeyGenWrapper;
		fn ResultKeygen2::get_user_indices(&self) -> Vec<i32>;
		fn ResultKeygen2::get_shares_at(&self, index: usize) -> Vec<i8>;
	}
);

foreign_class!(
	class SchnorrKeyWrapper {
		self_type SchnorrKeyWrapper;
		constructor SchnorrKeyWrapper::new() -> SchnorrKeyWrapper;
		fn SchnorrKeyWrapper::get_bitcoin_encoded_key(&self) -> Vec<i8>;
	}
);

foreign_class!(
	class SignParams2 {
		self_type SignParams2;
		constructor SignParams2::new() -> SignParams2;
		fn SignParams2::add_commitment_from_user(& mut self, user: u16, commitment: &[i8]);
	}
);

foreign_class!(
	class SignParams3 {
		self_type SignParams3;
		constructor SignParams3::new() -> SignParams3;
		fn SignParams3::add_share_of_user(& mut self, user: u16, share: &[i8]);
	}
);


foreign_class!(
	class SignResult1 {
		self_type SignResult1;
		constructor SignResult1::new() -> SignResult1;
		fn SignResult1::get_preprocess(&self) -> Vec<i8>;
		fn SignResult1::get_wrapper(res: SignResult1) -> SchnorrSignWrapper;
	}
);

foreign_class!(
	class SignResult2 {
		self_type SignResult2;
		constructor SignResult2::new() -> SignResult2;
		fn SignResult2::get_share(&self) -> Vec<i8>;
		fn SignResult2::get_wrapper(res: SignResult2) -> SchnorrSignWrapper;
	}
);

foreign_class!(
	class SchnorrSignWrapper {
		self_type SchnorrSignWrapper;
		constructor SchnorrSignWrapper::new() -> SchnorrSignWrapper;
		fn SchnorrSignWrapper::new_instance_for_signing(key: &SchnorrKeyWrapper, threshold: u32) -> SchnorrSignWrapper;
		fn SchnorrSignWrapper::sign_1_preprocess(wrapper: SchnorrSignWrapper) -> SignResult1;
		fn SchnorrSignWrapper::sign_2_sign(wrapper: SchnorrSignWrapper, params: SignParams2, msg_i8: &[i8], prev_out_script: &[i8]) -> SignResult2;
		fn SchnorrSignWrapper::sign_3_complete(wrapper: SchnorrSignWrapper, params: SignParams3) -> Vec<i8>;
	}
);

foreign_class!(
	class SchnorrKeyGenWrapper {
		self_type SchnorrKeyGenWrapper;
		constructor SchnorrKeyGenWrapper::new(threshold : u16 , n : u16 , index : u16 , context : String) -> SchnorrKeyGenWrapper;
		fn SchnorrKeyGenWrapper::key_gen_1_create_commitments(wrapper:SchnorrKeyGenWrapper) ->ResultKeygen1;
		fn SchnorrKeyGenWrapper::key_gen_2_generate_shares(wrapper: SchnorrKeyGenWrapper, param_wrapper: ParamsKeygen2) -> ResultKeygen2;
		fn SchnorrKeyGenWrapper::key_gen_3_complete(wrapper: SchnorrKeyGenWrapper, param_wrapper: ParamsKeygen3) -> SchnorrKeyWrapper;
	}
);

foreign_class!(
	class SchnorrSingleSignTest {
	    self_type SchnorrSingleSignTest;
	    constructor SchnorrSingleSignTest::new()-> SchnorrSingleSignTest;
	    fn SchnorrSingleSignTest::get_bitcoin_encoded_key(&self) -> Vec<i8>;
	    fn SchnorrSingleSignTest::sign_tx(&self,msg_i8: &[i8], prev_out_script: &[i8]) -> Vec<i8>;
	}
);